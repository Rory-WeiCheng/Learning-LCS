"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lcmt_visual(object):
    __slots__ = ["c_grad", "lambda_check", "res_check", "lambda_n"]

    __typenames__ = ["double", "double", "double", "double"]

    __dimensions__ = [[8], [8], [9], None]

    def __init__(self):
        self.c_grad = [ 0.0 for dim0 in range(8) ]
        self.lambda_check = [ 0.0 for dim0 in range(8) ]
        self.res_check = [ 0.0 for dim0 in range(9) ]
        self.lambda_n = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_visual._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>8d', *self.c_grad[:8]))
        buf.write(struct.pack('>8d', *self.lambda_check[:8]))
        buf.write(struct.pack('>9d', *self.res_check[:9]))
        buf.write(struct.pack(">d", self.lambda_n))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_visual._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_visual._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_visual()
        self.c_grad = struct.unpack('>8d', buf.read(64))
        self.lambda_check = struct.unpack('>8d', buf.read(64))
        self.res_check = struct.unpack('>9d', buf.read(72))
        self.lambda_n = struct.unpack(">d", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if lcmt_visual in parents: return 0
        tmphash = (0xe218efd770d7659c) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_visual._packed_fingerprint is None:
            lcmt_visual._packed_fingerprint = struct.pack(">Q", lcmt_visual._get_hash_recursive([]))
        return lcmt_visual._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", lcmt_visual._get_packed_fingerprint())[0]

