"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lcmt_visual(object):
    __slots__ = ["num_velocity", "num_lambda", "d_grad", "c_grad", "dyn_error_check", "lcp_error_check", "lambda_check", "res_check", "lambda_n", "Dlambda_check", "total_loss", "dyn_loss", "lcp_loss", "period_loss", "period_dyn_loss", "period_lcp_loss"]

    __typenames__ = ["int16_t", "int16_t", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, ["num_velocity"], ["num_lambda"], ["num_velocity"], ["num_lambda"], ["num_lambda"], ["num_velocity"], [2], ["num_velocity"], None, None, None, None, None, None]

    def __init__(self):
        self.num_velocity = 0
        self.num_lambda = 0
        self.d_grad = []
        self.c_grad = []
        self.dyn_error_check = []
        self.lcp_error_check = []
        self.lambda_check = []
        self.res_check = []
        self.lambda_n = [ 0.0 for dim0 in range(2) ]
        self.Dlambda_check = []
        self.total_loss = 0.0
        self.dyn_loss = 0.0
        self.lcp_loss = 0.0
        self.period_loss = 0.0
        self.period_dyn_loss = 0.0
        self.period_lcp_loss = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_visual._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hh", self.num_velocity, self.num_lambda))
        buf.write(struct.pack('>%dd' % self.num_velocity, *self.d_grad[:self.num_velocity]))
        buf.write(struct.pack('>%dd' % self.num_lambda, *self.c_grad[:self.num_lambda]))
        buf.write(struct.pack('>%dd' % self.num_velocity, *self.dyn_error_check[:self.num_velocity]))
        buf.write(struct.pack('>%dd' % self.num_lambda, *self.lcp_error_check[:self.num_lambda]))
        buf.write(struct.pack('>%dd' % self.num_lambda, *self.lambda_check[:self.num_lambda]))
        buf.write(struct.pack('>%dd' % self.num_velocity, *self.res_check[:self.num_velocity]))
        buf.write(struct.pack('>2d', *self.lambda_n[:2]))
        buf.write(struct.pack('>%dd' % self.num_velocity, *self.Dlambda_check[:self.num_velocity]))
        buf.write(struct.pack(">dddddd", self.total_loss, self.dyn_loss, self.lcp_loss, self.period_loss, self.period_dyn_loss, self.period_lcp_loss))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_visual._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_visual._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_visual()
        self.num_velocity, self.num_lambda = struct.unpack(">hh", buf.read(4))
        self.d_grad = struct.unpack('>%dd' % self.num_velocity, buf.read(self.num_velocity * 8))
        self.c_grad = struct.unpack('>%dd' % self.num_lambda, buf.read(self.num_lambda * 8))
        self.dyn_error_check = struct.unpack('>%dd' % self.num_velocity, buf.read(self.num_velocity * 8))
        self.lcp_error_check = struct.unpack('>%dd' % self.num_lambda, buf.read(self.num_lambda * 8))
        self.lambda_check = struct.unpack('>%dd' % self.num_lambda, buf.read(self.num_lambda * 8))
        self.res_check = struct.unpack('>%dd' % self.num_velocity, buf.read(self.num_velocity * 8))
        self.lambda_n = struct.unpack('>2d', buf.read(16))
        self.Dlambda_check = struct.unpack('>%dd' % self.num_velocity, buf.read(self.num_velocity * 8))
        self.total_loss, self.dyn_loss, self.lcp_loss, self.period_loss, self.period_dyn_loss, self.period_lcp_loss = struct.unpack(">dddddd", buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if lcmt_visual in parents: return 0
        tmphash = (0x439484de4ef0f627) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_visual._packed_fingerprint is None:
            lcmt_visual._packed_fingerprint = struct.pack(">Q", lcmt_visual._get_hash_recursive([]))
        return lcmt_visual._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", lcmt_visual._get_packed_fingerprint())[0]

